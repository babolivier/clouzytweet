// Generated by CoffeeScript 1.9.3
var cozydb, crypto, https, log, modurl, params, printit, twitterAccount,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

cozydb = require('cozydb');

https = require('https');

modurl = require('url');

crypto = require('crypto');

printit = require('printit');

log = printit({
  prefix: 'models:twitterAccount',
  date: true
});

params = {
  "oauth_next": "oob",
  "oauth_consumer_key": "4IeD033v2gU0BozKfVVoMd6vZ",
  "oauth_version": "1.0",
  "oauth_signature_method": "HMAC-SHA1",
  "oauth_nonce": null,
  "oauth_timestamp": null,
  "oauth_token": null,
  "oauth_verifier": null
};

module.exports = twitterAccount = (function(superClass) {
  extend(twitterAccount, superClass);

  function twitterAccount() {
    return twitterAccount.__super__.constructor.apply(this, arguments);
  }

  twitterAccount.docType = 'twitterAccount';

  twitterAccount.schema = {
    oauth_token: String,
    password: String,
    user_id: Number,
    screen_name: String
  };

  twitterAccount.tokens = {
    temp: null,
    final: null
  };

  twitterAccount.getNonce = function() {
    var i, possible, text;
    text = "";
    possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    i = 0;
    while (i !== 32) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
      i++;
    }
    return (new Buffer(text)).toString();
  };

  twitterAccount.getParameters = function(oauthParams, additionalInfo) {
    var finalValue, key, parameters, value;
    parameters = [];
    for (key in params) {
      value = params[key];
      if (oauthParams.indexOf(key) !== -1) {
        finalValue = null;
        switch (key) {
          case "oauth_nonce":
            finalValue = twitterAccount.getNonce();
            break;
          case "oauth_timestamp":
            finalValue = Math.floor(Date.now() / 1000);
        }
        if (additionalInfo && additionalInfo[key]) {
          finalValue = additionalInfo[key];
        }
        if (finalValue === null) {
          finalValue = value;
        }
        parameters.push(encodeURIComponent(key) + "=" + encodeURIComponent(finalValue));
      }
    }
    return parameters = parameters.sort();
  };

  twitterAccount.getSignedHeader = function(method, url, oauthParams, additionalInfo) {
    var consumer_secret, field, header, info, parameters, signBase, signature, signing_key;
    parameters = twitterAccount.getParameters(oauthParams, additionalInfo);
    for (field in additionalInfo) {
      info = additionalInfo[field];
      if (!field.match(/^oauth/)) {
        parameters.push(encodeURIComponent(field) + "=" + encodeURIComponent(info));
      }
    }
    parameters = parameters.sort();
    signBase = parameters.join('&');
    signature = method + "&" + encodeURIComponent(url) + "&" + encodeURIComponent(signBase);
    consumer_secret = "UIKd7zyEX8gAmcJFltz86oTpFjbLxiNWTutXgO9S3PjC7EV9DX";
    signing_key = encodeURIComponent(consumer_secret) + "&";
    if (twitterAccount.tokens.final) {
      signing_key += encodeURIComponent(twitterAccount.tokens.final.password);
    }
    signature = crypto.createHmac('sha1', signing_key).update(signature).digest('base64');
    parameters.push(encodeURIComponent("oauth_signature") + '=' + encodeURIComponent(signature));
    parameters.sort();
    return header = 'OAuth ' + parameters.join(', ');
  };

  twitterAccount.sendSignedRequest = function(method, url, oauthParams, additionalInfo, next) {
    var data, header, key, oauthUrl, options, param, req;
    url = modurl.parse(url);
    oauthUrl = url.protocol + "//" + url.hostname + url.pathname;
    header = this.getSignedHeader(method, oauthUrl, oauthParams, additionalInfo);
    data = [];
    for (key in additionalInfo) {
      param = additionalInfo[key];
      if (!key.match(/^oauth/)) {
        data.push(encodeURIComponent(key) + '=' + encodeURIComponent(param));
      }
    }
    data = data.join("&");
    options = {
      hostname: url.host,
      port: 443,
      path: url.path,
      method: method,
      headers: {
        'Authorization': header
      }
    };
    if (data) {
      if (method === "GET") {
        options["path"] = options["path"] + "?" + data;
      } else {
        options["body"] = data;
      }
    }
    req = https.request(options, (function(_this) {
      return function(res) {
        if (res.statusCode === 200) {
          return next(null, res);
        } else {
          return res.on("data", function(data) {
            var err;
            err = new Error("Can't proceed the request, Twitter responded with a " + res.statusCode + " status code. Full message: " + data);
            log.error(err);
            return next(err);
          });
        }
      };
    })(this));
    req.on("error", function(err) {
      log.error("The server encountered a network error:");
      console.log(err);
      return next(err);
    });
    return req.end();
  };

  twitterAccount.bodyToJSON = function(body) {
    var element, elements, j, json, key, len, ref, value;
    elements = body.split('&');
    json = {};
    for (j = 0, len = elements.length; j < len; j++) {
      element = elements[j];
      ref = element.split('='), key = ref[0], value = ref[1];
      json[key] = value;
    }
    return json;
  };

  twitterAccount.saveUser = function(data, next) {
    return this.create({
      oauth_token: data.oauth_token,
      password: data.oauth_token_secret,
      user_id: data.user_id,
      screen_name: data.screen_name
    }, function(err, result) {
      if (err) {
        return next(err, null);
      } else {
        log.info("Successfully logged in as " + data.screen_name + ".");
        return next(null, true);
      }
    });
  };

  twitterAccount.loadLastLogin = function(next) {
    return this.request('all', (function(_this) {
      return function(err, results) {
        if (err) {
          return next(err);
        } else {
          _this.tokens.final = results[0];
          log.info("Loaded user " + _this.tokens.final.screen_name + ".");
          return next(null);
        }
      };
    })(this));
  };

  twitterAccount.getTempTokens = function(next) {
    return twitterAccount.sendSignedRequest("POST", "https://api.twitter.com/oauth/request_token", ["oauth_callback", "oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version"], null, function(err, res) {
      var body;
      if (err) {
        return next(err);
      } else {
        body = "";
        res.on("data", function(chunk) {
          return body += chunk.toString();
        });
        return res.on("end", function() {
          var data;
          data = twitterAccount.bodyToJSON(body);
          next(null, data);
          return twitterAccount.tokens.temp = data.oauth_token;
        });
      }
    });
  };

  twitterAccount.validatePIN = function(pin, next) {
    return this.sendSignedRequest("POST", "https://api.twitter.com/oauth/access_token", ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_verifier", "oauth_token"], {
      "oauth_verifier": pin,
      "oauth_token": this.tokens.temp
    }, (function(_this) {
      return function(err, res) {
        var body;
        body = "";
        res.on("data", function(chunk) {
          return body += chunk.toString();
        });
        return res.on("end", function() {
          return _this.saveUser(_this.bodyToJSON(body), function(err, created) {
            return next(err, created);
          });
        });
      };
    })(this));
  };

  twitterAccount.whoAmI = function() {
    return this.tokens.final;
  };

  twitterAccount.tweet = function(content, next) {
    return this.loadLastLogin((function(_this) {
      return function(err) {
        if (err) {
          return next(err);
        } else {
          if (content.length < 141) {
            return _this.sendTweet(content, next);
          } else {
            return next("Too long");
          }
        }
      };
    })(this));
  };

  twitterAccount.sendTweet = function(tweet, next) {
    return this.sendSignedRequest("POST", "https://api.twitter.com/1.1/statuses/update.json?status=" + encodeURIComponent(tweet), ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
      "oauth_token": this.tokens.final.oauth_token,
      "status": tweet
    }, (function(_this) {
      return function(err, res) {
        var body;
        if (err) {
          return next(err);
        } else {
          body = "";
          res.on("data", function(chunk) {
            return body += chunk.toString();
          });
          return res.on("end", function() {
            next(null, JSON.parse(body));
            return log.info("Successfully tweeted \"" + tweet + "\" as " + _this.tokens.final.screen_name);
          });
        }
      };
    })(this));
  };

  twitterAccount.getTimeline = function(mode, next) {
    return this.loadLastLogin((function(_this) {
      return function(err) {
        var url;
        if (err) {
          return next(err);
        } else {
          if (mode === "mentions") {
            url = "https://api.twitter.com/1.1/statuses/mentions_timeline.json";
          } else if (mode === "direct_messages") {
            url = "https://api.twitter.com/1.1/direct_messages.json";
          } else {
            url = "https://api.twitter.com/1.1/statuses/home_timeline.json";
          }
          return _this.sendSignedRequest("GET", url, ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
            "oauth_token": _this.tokens.final.oauth_token
          }, function(err, res) {
            var body;
            if (err) {
              next(err);
              return console.log(err);
            } else {
              body = "";
              res.on("data", function(chunk) {
                return body += chunk.toString();
              });
              return res.on("end", function() {
                return next(null, JSON.parse(body));
              });
            }
          });
        }
      };
    })(this));
  };

  twitterAccount.getStreamingTimeline = function(mode, next) {
    return this.loadLastLogin((function(_this) {
      return function(err) {
        var additionalInfos;
        if (err) {
          return next(err);
        } else {
          additionalInfos = {
            "oauth_token": _this.tokens.final.oauth_token
          };
          if (mode === "mentions") {
            additionalInfos["with"] = "user";
          }
          return _this.sendSignedRequest("GET", "https://userstream.twitter.com/1.1/user.json", ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], additionalInfos, function(err, res) {
            var data;
            if (err) {
              return next(err);
            } else {
              data = "";
              res.on("data", function(chunk) {
                var str;
                if (!chunk.toString().match(/^\r\n$/)) {
                  if (str = chunk.toString().match(/(.+)(\r\n)+$/)) {
                    next(null, data + str[1]);
                    return data = "";
                  } else {
                    return data += chunk.toString();
                  }
                }
              });
              return res.on("end", function() {
                return next(new Error("Stream closed"));
              });
            }
          });
        }
      };
    })(this));
  };

  twitterAccount.getTweet = function(id, next) {
    return twitterAccount.loadLastLogin(function(err) {
      if (err) {
        return next(err);
      } else {
        return twitterAccount.sendSignedRequest("GET", "https://api.twitter.com/1.1/statuses/show/" + id + ".json", ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
          "oauth_token": twitterAccount.tokens.final.oauth_token
        }, function(err, res) {
          var data;
          if (err) {
            return next(err);
          } else {
            data = "";
            res.on("data", function(chunk) {
              return data += chunk.toString();
            });
            return res.on("end", function() {
              return next(null, data);
            });
          }
        });
      }
    });
  };

  twitterAccount.retweet = function(id, next) {
    return twitterAccount.loadLastLogin(function(err) {
      if (err) {
        return next(err);
      } else {
        return twitterAccount.sendSignedRequest("POST", "https://api.twitter.com/1.1/statuses/retweet/" + id + ".json", ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
          "oauth_token": twitterAccount.tokens.final.oauth_token
        }, function(err, res) {
          var data;
          if (err) {
            return next(err);
          } else {
            data = "";
            res.on("data", function(chunk) {
              return data += chunk.toString();
            });
            return res.on("end", function() {
              return next(null, data);
            });
          }
        });
      }
    });
  };

  twitterAccount.favorite = function(id, next) {
    return twitterAccount.loadLastLogin(function(err) {
      if (err) {
        return next(err);
      } else {
        return twitterAccount.sendSignedRequest("POST", "https://api.twitter.com/1.1/favorites/create.json?id=" + id, ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
          "oauth_token": twitterAccount.tokens.final.oauth_token,
          "id": id
        }, function(err, res) {
          var data;
          if (err) {
            return next(err);
          } else {
            data = "";
            res.on("data", function(chunk) {
              return data += chunk.toString();
            });
            return res.on("end", function() {
              return next(null, data);
            });
          }
        });
      }
    });
  };

  twitterAccount["delete"] = function(id, next) {
    return twitterAccount.loadLastLogin(function(err) {
      if (err) {
        return next(err);
      } else {
        return twitterAccount.sendSignedRequest("POST", "https://api.twitter.com/1.1/statuses/destroy/" + id + ".json", ["oauth_consumer_key", "oauth_nonce", "oauth_signature_method", "oauth_timestamp", "oauth_version", "oauth_token"], {
          "oauth_token": twitterAccount.tokens.final.oauth_token
        }, function(err, res) {
          var data;
          if (err) {
            return next(err);
          } else {
            data = "";
            res.on("data", function(chunk) {
              return data += chunk.toString();
            });
            return res.on("end", function() {
              return next(null, JSON.parse(data));
            });
          }
        });
      }
    });
  };

  return twitterAccount;

})(cozydb.CozyModel);
